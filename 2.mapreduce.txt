	import java.util.*;
	import java.io.IOException;
	import java.io.IOException;
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.conf.*;
	import org.apache.hadoop.io.*;
	import org.apache.hadoop.mapred.*;
	import org.apache.hadoop.util.*;
	public class Cyber
	{
	//Mapper class
	public static class E_EMapper extends MapReduceBase implements
	Mapper<LongWritable ,/*Input key Type */
	Text, /*Input value Type*/
	Text, /*Output key Type*/
	IntWritable> /*Output value Type*/
	{
	//Map function
	public void map(LongWritabIe key, Text value,
	OutputCoIIector<Text, IntWritabIe> output,
	Reporter reporter) throws IOException
	{
String line = value.toString(); int lasttoken = 00;
StringTokenizer s = new StringTokenizer(line,”\t”); String name = s.nextToken(); while(s.hasMoreTokens())
lasttoken += (Integer.parseInt(s.nextToken())), //add all the elemen int avgtime = lasttoken/7, // calculate average
output.collect(new Text(name), new IntWritabIe(avgtime)),
}
 
	//Reducer class
	public static class E_EReduce extends MapReduceBase implements
	Reducer< Text, IntWritable, Text, IntWritable >
	{
	//Reduce function
	public void reduce(
	Text keyt
	Iterator <IntWritable+ values,
	OutputCollector<Text, IntWritable> output,
	Reporter reporter) throws IOException
	{
	int avg=5;	//threshold value for max time internet usage
	int val=0;
	while (values.hasNext())
	{
	if((valmalues.next().get0)>avg)
	{
	}
	}
 
output.collect(key, new IntWritable(val));
}
}
}
}
//Main function
	public static void main(String args[])throws Exception
	{
	JobConf conf= new JobConf(Cyber.class);
	conf.setJobName(”Internet Log");
	conf.setOutputKeyClass(Text.class);
	conf.setOutputVaIueClass(IntWritable.class);
	conf.setMapperCIass(E_EMapper.class);
	conf.setCombinerClass(E_EReduce.class);
	conf.setReducerCIass(E_EReduce.class);
	conf.setInputFormat(TextInputFormat.class);
	conf.setOutputFormat(TextOutputFormat.class);
	FiIeInputFormat.setInputPaths(conf, new Path(args[0]));
	FiIeOutputFormat.setOutputPath(conf, new Path(args[1]));
	JobCIient.runJob(conf);
	}
 }

 
